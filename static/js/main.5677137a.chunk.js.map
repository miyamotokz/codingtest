{"version":3,"sources":["lib/fetch.ts","lib/makeGraphOptions.ts","components/graphContainer.tsx","components/todohukenCheckBox.tsx","components/todohukenCheckBoxContainer.tsx","components/pageHeader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetcher","url","axios","get","headers","X-API-KEY","process","then","res","data","FetchTodohukenList","useSWRImmutable","makeGraphOptions","checkedList","populations","Object","toConsumableArray","Array","map","_","i","code","_FetchPopulation","concat","error","result","length","populationDataList","_FetchTodohukenList","todohukenList","categories","series","todohuken","area","push","year","dataList","value","name","prefName","type","marker","enabled","symbol","radius","title","text","caption","xAxis","yAxis","legend","layout","align","verticalAlign","GraphContainer","props","chartComponentRef","useRef","Highcharts","setOptions","lang","thousandsSep","numericSymbols","options","react_default","a","createElement","highcharts_react_min_default","assign","highcharts","ref","Fragment","TodohukenCheckBox","_ref","e","onCheckTodohuken","prefCode","className","id","onChange","htmlFor","TodohukenCheckBoxContainer","onCheck","todohukenCheckBox","key","pageHeader","App","_useState","useState","_useState2","slicedToArray","checked","setChecked","components_pageHeader","todohukenCheckBoxContainer","newChecked","indexOf","splice","toggleCheck","graphContainer","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.5677137a.chunk.js","sourcesContent":["import axios from 'axios'\nimport useSWRImmutable from 'swr/immutable'\n\nconst fetcher = (url: string) => axios.get(url, { headers: { 'X-API-KEY': process.env.REACT_APP_RESAS_API_KEY || '' } }).then((res) => res.data)\n\nexport const FetchTodohukenList = () => {\n  return useSWRImmutable(`https://opendata.resas-portal.go.jp/api/v1/prefectures`, fetcher)\n}\n\nexport const FetchPopulation = (code: number) => {\n  return useSWRImmutable(`https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=${code}&cityCode=-`, fetcher)\n}\n","import Highcharts from 'highcharts'\nimport { FetchPopulation, FetchTodohukenList } from './fetch'\n\ntype Todohuken = {\n  prefCode: number\n  prefName: string\n}\n// グラフデータ（options）作成　optionsを返す\nexport const makeGraphOptions = (checkedList: number[]) => {\n  //都道府県別の人口データ取得\n  const populations = [...Array(47)].map((_, i) => {\n    const { data, error } = FetchPopulation(i + 1)\n    if (data) return data.result\n  })\n  if (populations.length !== 47) return 0 //47都道府県全部Fetchが終わるまでは0\n\n  //result:{data:{0:{label:\"総人口\".data:{0:{year,value}}}}}からyearとvalueだけ取り出す\n  const populationDataList = populations.map((data) => {\n    if (data) return data.data[0].data\n  })\n\n  //都道府県名取得\n  const { data, error } = FetchTodohukenList()\n  if (!data) return 0 //取得終わるまでは0\n  const todohukenList: Todohuken[] = data.result\n\n  // リターン用データ\n  let categories: any[] = []\n  let series: Highcharts.SeriesOptionsType[] = []\n\n  //チェックされた都道府県のデータだけ設定\n  checkedList.map((todohuken: number, i: number) => {\n    todohuken--\n    populationDataList[todohuken].map((area: any) => {\n      categories.push(area.year)\n    })\n    const dataList = populationDataList[todohuken].map((area: any) => area.value)\n    const name = todohukenList[todohuken].prefName\n    series.push({\n      type: 'line',\n      name: name,\n      data: dataList,\n      marker: {\n        enabled: true,\n        symbol: 'circle',\n        radius: 0,\n      },\n    })\n  })\n  //リターン用\n  const options: Highcharts.Options = {\n    title: {\n      text: '人口統計',\n    },\n    caption: {\n      text: '選択した各県の総人口のグラフ',\n    },\n    xAxis: {\n      title: {\n        text: '年度',\n      },\n      categories: categories,\n    },\n    yAxis: {\n      title: {\n        text: '人口数',\n      },\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle',\n    },\n    series: series.length === 0 ? [{ type: 'line', name: '都道府県名', data: [] }] : series,\n  }\n  return options\n}\n","import React, { useRef } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport '../App.css'\nimport { makeGraphOptions } from '../lib/makeGraphOptions'\n\ntype Todohuken = {\n  prefCode: number\n  prefName: string\n}\ntype Props = {\n  checkedList: number[]\n}\n\nconst GraphContainer: React.FC<Props> = (props) => {\n  const chartComponentRef = useRef<HighchartsReact.RefObject>(null)\n\n  Highcharts.setOptions({\n    lang: {\n      thousandsSep: '',\n      numericSymbols: [],\n    },\n  })\n  const options = makeGraphOptions(props.checkedList)\n  if (!options) return <>Loading</> //データ整形前はLoadingを返す\n  return <HighchartsReact highcharts={Highcharts} options={options} ref={chartComponentRef} {...props} />\n}\nexport default GraphContainer\n","import React from 'react'\nimport '../App.css'\n\ntype Todohuken = {\n  prefCode: number\n  prefName: string\n}\ntype Props = {\n  e: Todohuken\n  onCheckTodohuken: (arg0: any) => void\n}\nconst TodohukenCheckBox: React.FC<Props> = ({ e, onCheckTodohuken }) => {\n  const name: string = 'todohuken' + e.prefCode\n  return (\n    <div className=\"checkbox-part\">\n      <input type=\"checkbox\" value={e.prefCode} id={name} onChange={() => onCheckTodohuken(e.prefCode)} className=\"todohuken-checkbox\"></input>\n      <label htmlFor={name} className=\"todohuken-checkbox-label\">\n        {e.prefName}\n      </label>\n    </div>\n  )\n}\n\nexport default TodohukenCheckBox\n","import React from 'react'\nimport '../App.css'\nimport { FetchTodohukenList } from '../lib/fetch'\nimport TdohukenCheckBox from './todohukenCheckBox'\n\ntype Todohuken = {\n  prefCode: number\n  prefName: string\n}\ntype Props = {\n  onCheck: (arg0: any) => void\n}\n\nconst TodohukenCheckBoxContainer: React.FC<Props> = ({ onCheck }) => {\n  const { data, error } = FetchTodohukenList()\n  if (!data) return <>Loading</>\n  const todohuken = data.result\n  return (\n    <section className=\"checkboxContanier\">\n      <h2 className=\"checkbox-title\">都道府県</h2>\n      <div className=\"checkbox-area\">\n        <form>\n          {todohuken.map((e: Todohuken, i: number) => {\n            return <TdohukenCheckBox onCheckTodohuken={onCheck} e={e} key={e.prefName} />\n          })}\n        </form>\n      </div>\n    </section>\n  )\n}\n\nexport default TodohukenCheckBoxContainer\n","import React from 'react'\nimport '../App.css'\n\nconst pageHeader: React.FC = () => {\n  return (\n    <header className=\"pageHeader\">\n      <h1>Title</h1>\n    </header>\n  )\n}\n\nexport default pageHeader\n","import React, { useState } from 'react'\nimport './App.css'\nimport GraphContainer from './components/graphContainer'\nimport TodohukenCheckBoxContainer from './components/todohukenCheckBoxContainer'\nimport PageHeader from './components/pageHeader'\nfunction App() {\n  const [checked, setChecked] = useState<number[]>([])\n\n  const toggleCheck = (e: number) => {\n    const newCheckedCreate = () => {\n      if (checked.indexOf(e) !== -1) {\n        checked.splice(checked.indexOf(e), 1)\n        return [...checked]\n      } else {\n        return [...checked, e]\n      }\n    }\n\n    const newChecked = newCheckedCreate()\n    setChecked(newChecked)\n  }\n\n  return (\n    <>\n      <PageHeader />\n      <TodohukenCheckBoxContainer\n        onCheck={(e) => {\n          toggleCheck(e)\n        }}\n      />\n      <GraphContainer checkedList={checked} />\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}